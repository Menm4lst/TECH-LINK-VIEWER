"""
Modelo de tabla para mostrar enlaces en PyQt6.
"""
from typing import List, Dict, Any, Optional, Tuple
from PyQt6.QtCore import QAbstractTableModel, Qt, QModelIndex, QVariant, pyqtSignal
from PyQt6.QtGui import QFont, QColor
from ..utils.time import formatear_fecha
from ..config import obtener_config_tabla


def truncar_url_inteligente(url: str, max_chars: int = 60) -> str:
    """
    Trunca una URL de manera inteligente preservando informaci√≥n importante.
    
    Args:
        url: URL a truncar
        max_chars: M√°ximo n√∫mero de caracteres
        
    Returns:
        URL truncada
    """
    if len(url) <= max_chars:
        return url
    
    # Intentar preservar el dominio y la parte final importante
    if "://" in url:
        protocolo, resto = url.split("://", 1)
        if "/" in resto:
            dominio, path = resto.split("/", 1)
            # Si el dominio es muy largo, truncarlo tambi√©n
            if len(dominio) > max_chars - 10:
                dominio_truncado = dominio[:max_chars - 13] + "..."
                return f"{protocolo}://{dominio_truncado}"
            else:
                # Mostrar dominio + inicio del path
                chars_disponibles = max_chars - len(protocolo) - len(dominio) - 6  # "://" + "..."
                if chars_disponibles > 0:
                    path_truncado = path[:chars_disponibles]
                    return f"{protocolo}://{dominio}/{path_truncado}..."
                else:
                    return f"{protocolo}://{dominio}/..."
        else:
            # Solo dominio, truncar si es necesario
            if len(resto) > max_chars - len(protocolo) - 6:
                resto_truncado = resto[:max_chars - len(protocolo) - 6]
                return f"{protocolo}://{resto_truncado}..."
            return url
    
    # Si no tiene protocolo, truncar normalmente
    return url[:max_chars - 3] + "..."


class ModeloTablaEnlaces(QAbstractTableModel):
    """
    Modelo personalizado para mostrar enlaces en QTableView.
    """
    
    # Se√±ales personalizadas
    enlace_doble_click = pyqtSignal(str)  # Emite ID del enlace
    tag_clickeado = pyqtSignal(str)       # Emite tag clickeado
    
    def __init__(self):
        super().__init__()
        self._enlaces: List[Dict[str, Any]] = []
        self._enlaces_con_score: List[Tuple[Dict[str, Any], float]] = []
        self._columnas = ["T√≠tulo", "URL", "Categor√≠a", "Tags", "Actualizado"]
        self._usar_scores = False
    
    def rowCount(self, parent: QModelIndex = QModelIndex()) -> int:
        """Retorna el n√∫mero de filas."""
        return len(self._enlaces)
    
    def columnCount(self, parent: QModelIndex = QModelIndex()) -> int:
        """Retorna el n√∫mero de columnas."""
        return len(self._columnas)
    
    def data(self, index: QModelIndex, role: int = Qt.ItemDataRole.DisplayRole) -> Any:
        """
        Retorna los datos para mostrar en la tabla.
        
        Args:
            index: √çndice de la celda
            role: Rol de los datos (display, font, color, etc.)
            
        Returns:
            Datos a mostrar
        """
        if not index.isValid() or not (0 <= index.row() < len(self._enlaces)):
            return QVariant()
        
        enlace = self._enlaces[index.row()]
        columna = index.column()
        
        if role == Qt.ItemDataRole.DisplayRole:
            return self._obtener_dato_display(enlace, columna)
        elif role == Qt.ItemDataRole.FontRole:
            return self._obtener_fuente(enlace, columna)
        elif role == Qt.ItemDataRole.ForegroundRole:
            return self._obtener_color_texto(enlace, columna)
        elif role == Qt.ItemDataRole.ToolTipRole:
            return self._obtener_tooltip(enlace, columna)
        elif role == Qt.ItemDataRole.UserRole:
            # Rol personalizado para obtener el ID del enlace
            return enlace.get('id', '')
        
        return QVariant()
    
    def _obtener_dato_display(self, enlace: Dict[str, Any], columna: int) -> str:
        """Obtiene el dato a mostrar para una columna espec√≠fica."""
        if columna == 0:  # T√≠tulo
            titulo = enlace.get('titulo', '')
            # Si hay score, mostrar indicador de relevancia
            if self._usar_scores:
                score = self._obtener_score_enlace(enlace)
                if score < 0.5:
                    return f"üîç {titulo}"  # Indicador de b√∫squeda fuzzy
            return titulo
            
        elif columna == 1:  # URL
            url = enlace.get('url', '')
            config = obtener_config_tabla()
            return truncar_url_inteligente(url, max_chars=config['url_max_chars'])
            
        elif columna == 2:  # Categor√≠a
            return enlace.get('categoria', '')
            
        elif columna == 3:  # Tags
            tags = enlace.get('tags', [])
            if isinstance(tags, list):
                return ", ".join(tags)
            return ""
            
        elif columna == 4:  # Fecha actualizaci√≥n
            timestamp = enlace.get('actualizado_en', '')
            return formatear_fecha(timestamp)
        
        return ""
    
    def _obtener_fuente(self, enlace: Dict[str, Any], columna: int) -> Optional[QFont]:
        """Obtiene la fuente para una celda espec√≠fica."""
        fuente = QFont()
        
        if columna == 0:  # T√≠tulo en negrita
            fuente.setBold(True)
        elif columna == 3:  # Tags en cursiva
            fuente.setItalic(True)
            fuente.setPointSize(9)
        
        return fuente
    
    def _obtener_color_texto(self, enlace: Dict[str, Any], columna: int) -> Optional[QColor]:
        """Obtiene el color del texto para una celda espec√≠fica."""
        if columna == 1:  # URL en azul
            return QColor(0, 0, 255)
        elif columna == 3:  # Tags en gris
            return QColor(100, 100, 100)
        elif columna == 4:  # Fecha en gris claro
            return QColor(150, 150, 150)
        
        return None
    
    def _obtener_tooltip(self, enlace: Dict[str, Any], columna: int) -> str:
        """Obtiene el tooltip para una celda espec√≠fica."""
        if columna == 0:  # T√≠tulo
            titulo = enlace.get('titulo', '')
            descripcion = enlace.get('descripcion', '')
            tooltip = f"üìù T√≠tulo: {titulo}"
            if descripcion:
                tooltip += f"\nüí¨ Descripci√≥n: {descripcion}"
            tooltip += "\nüñ±Ô∏è Doble clic para abrir"
            return tooltip
            
        elif columna == 1:  # URL completa
            url = enlace.get('url', '')
            tooltip = f"üåê URL: {url}"
            
            # A√±adir informaci√≥n adicional si la URL fue truncada
            if len(url) > 60:
                tooltip += f"\nüìè Longitud: {len(url)} caracteres"
                
            # Extraer dominio para mostrar informaci√≥n adicional
            if "://" in url:
                try:
                    protocolo, resto = url.split("://", 1)
                    dominio = resto.split("/")[0]
                    tooltip += f"\nüè† Dominio: {dominio}"
                    tooltip += f"\nüîê Protocolo: {protocolo.upper()}"
                except:
                    pass
                    
            tooltip += "\nüñ±Ô∏è Doble clic para abrir"
            return tooltip
        elif columna == 2:  # Categor√≠a
            return f"Categor√≠a: {enlace.get('categoria', '')}\nClic para filtrar"
        elif columna == 3:  # Tags
            tags = enlace.get('tags', [])
            if tags:
                return f"Tags: {', '.join(tags)}\nClic en un tag para filtrar"
            return "Sin tags"
        elif columna == 4:  # Informaci√≥n de fechas
            creado = enlace.get('creado_en', '')
            actualizado = enlace.get('actualizado_en', '')
            return f"Creado: {formatear_fecha(creado)}\nActualizado: {formatear_fecha(actualizado)}"
        
        return ""
    
    def _obtener_score_enlace(self, enlace: Dict[str, Any]) -> float:
        """Obtiene el score de un enlace si est√° disponible."""
        enlace_id = enlace.get('id', '')
        for enlace_score, score in self._enlaces_con_score:
            if enlace_score.get('id') == enlace_id:
                return score
        return 1.0
    
    def headerData(self, section: int, orientation: Qt.Orientation, 
                  role: int = Qt.ItemDataRole.DisplayRole) -> Any:
        """
        Retorna los datos de los encabezados.
        
        Args:
            section: N√∫mero de secci√≥n (columna o fila)
            orientation: Orientaci√≥n (horizontal o vertical)
            role: Rol de los datos
            
        Returns:
            Datos del encabezado
        """
        if role == Qt.ItemDataRole.DisplayRole:
            if orientation == Qt.Orientation.Horizontal:
                if 0 <= section < len(self._columnas):
                    return self._columnas[section]
            else:
                return str(section + 1)
        elif role == Qt.ItemDataRole.FontRole and orientation == Qt.Orientation.Horizontal:
            fuente = QFont()
            fuente.setBold(True)
            return fuente
        
        return QVariant()
    
    def flags(self, index: QModelIndex) -> Qt.ItemFlag:
        """Retorna las flags para una celda espec√≠fica."""
        if not index.isValid():
            return Qt.ItemFlag.NoItemFlags
        
        return Qt.ItemFlag.ItemIsEnabled | Qt.ItemFlag.ItemIsSelectable
    
    def actualizar_enlaces(self, enlaces: List[Dict[str, Any]]) -> None:
        """
        Actualiza la lista de enlaces mostrados.
        
        Args:
            enlaces: Nueva lista de enlaces
        """
        self.beginResetModel()
        self._enlaces = enlaces.copy()
        self._enlaces_con_score = []
        self._usar_scores = False
        self.endResetModel()
    
    def actualizar_enlaces_con_score(self, enlaces_con_score: List[Tuple[Dict[str, Any], float]]) -> None:
        """
        Actualiza la lista de enlaces con scores de b√∫squeda.
        
        Args:
            enlaces_con_score: Lista de tuplas (enlace, score)
        """
        self.beginResetModel()
        self._enlaces = [enlace for enlace, _ in enlaces_con_score]
        self._enlaces_con_score = enlaces_con_score.copy()
        self._usar_scores = True
        self.endResetModel()
    
    def obtener_enlace_por_fila(self, fila: int) -> Optional[Dict[str, Any]]:
        """
        Obtiene el enlace de una fila espec√≠fica.
        
        Args:
            fila: N√∫mero de fila
            
        Returns:
            Diccionario con el enlace o None si la fila no es v√°lida
        """
        if 0 <= fila < len(self._enlaces):
            return self._enlaces[fila]
        return None
    
    def obtener_id_enlace_por_fila(self, fila: int) -> Optional[str]:
        """
        Obtiene el ID del enlace de una fila espec√≠fica.
        
        Args:
            fila: N√∫mero de fila
            
        Returns:
            ID del enlace o None si la fila no es v√°lida
        """
        enlace = self.obtener_enlace_por_fila(fila)
        return enlace.get('id') if enlace else None
    
    def obtener_tag_en_posicion(self, fila: int, columna: int, posicion_x: int) -> Optional[str]:
        """
        Obtiene el tag espec√≠fico en una posici√≥n de clic dentro de la celda de tags.
        
        Args:
            fila: N√∫mero de fila
            columna: N√∫mero de columna
            posicion_x: Posici√≥n X del clic dentro de la celda
            
        Returns:
            Tag clickeado o None si no se clicke√≥ en un tag
        """
        if columna != 3:  # Solo la columna de tags
            return None
        
        enlace = self.obtener_enlace_por_fila(fila)
        if not enlace:
            return None
        
        tags = enlace.get('tags', [])
        if not tags:
            return None
        
        # Aproximaci√≥n simple: dividir el ancho de la celda entre los tags
        # En una implementaci√≥n m√°s avanzada, se calcular√≠a el ancho real de cada tag
        texto_tags = ", ".join(tags)
        if posicion_x > 0 and len(texto_tags) > 0:
            # Calcular qu√© tag fue clickeado basado en la posici√≥n aproximada
            posicion_relativa = posicion_x / 200  # Ancho aproximado de celda
            indice_tag = int(posicion_relativa * len(tags))
            
            if 0 <= indice_tag < len(tags):
                return tags[indice_tag]
        
        return None
    
    def limpiar(self) -> None:
        """Limpia todos los datos del modelo."""
        self.beginResetModel()
        self._enlaces = []
        self._enlaces_con_score = []
        self._usar_scores = False
        self.endResetModel()
    
    def esta_vacio(self) -> bool:
        """Retorna True si el modelo no tiene datos."""
        return len(self._enlaces) == 0
    
    def obtener_numero_enlaces(self) -> int:
        """Retorna el n√∫mero total de enlaces."""
        return len(self._enlaces)